# -*- coding: utf-8 -*-
"""Day077_HW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h7uCQPfVnwPbnGkadH5gw9VehDzoNqXJ

## Work
1. 請將 Epoch 加到 500 個，並觀察 learning curve 的走勢
2. 請將 Optimizer 換成 SGD，並觀察 learning curve 的走勢
"""

import os
import keras

# Disable GPU
# os.environ["CUDA_VISIBLE_DEVICES"] = ""

# train, test = keras.datasets.cifar10.load_data()
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
print(f'x_train shape: {x_train.shape}\ny_train shape: {y_train.shape}')

x_train = x_train / 255.
x_test = x_test / 255.

print(f'x_train shape: {x_train.shape}\ny_train shape: {y_train.shape}')

# Flatten the images
x_train = x_train.reshape(len(x_train), -1)
x_test = x_test.reshape(len(x_test), -1)
# x_train = x_train.reshape(x_train.shape[0], -1)
# x_test = x_test.reshape(x_test.shape[0], -1)


# Convert y to onehot
y_train = keras.utils.to_categorical(y_train, num_classes=10)
y_test = keras.utils.to_categorical(y_test, num_classes=10)

print(f'x_train shape: {x_train.shape}\ny_train shape: {y_train.shape}')

def build_mlp(data, output):
    """
    Try to build your own model
    """
    input_layer = keras.layers.Input([data.shape[-1]])
    x = keras.layers.Dense(units=512, activation='relu')(input_layer)
    for i in [256, 256]:
        x = keras.layers.Dense(units=i, activation='relu')(x)
    output_layer = keras.layers.Dense(units=output.shape[-1], activation='softmax')(x)
    
    model = keras.models.Model(inputs=input_layer, outputs=output_layer)
    return model
model = build_mlp(x_train, y_train)
model.summary()

"""
Compile your model
"""
model.compile(optimizer='SGD', loss='binary_crossentropy', metrics=['accuracy'])

"""
Set epochs
"""
EPOCHS = 20
BATCH_SIZE = 512

# model.fit(x_train, y_train, 
#           epochs=EPOCHS, 
#           batch_size=BATCH_SIZE, 
#           validation_data=(x_test, y_test), 
#           shuffle=True)

model.fit(x_train, y_train, 
          epochs=EPOCHS, 
          batch_size=BATCH_SIZE, 
          validation_split=0.1, 
          shuffle=True)

import matplotlib.pyplot as plt
"""
Get the training loss / validation loss / training accuracy / validation accuracy and plot them
"""

train_loss = model.history.history["loss"]
valid_loss = model.history.history["val_loss"]

train_acc = model.history.history["acc"]
valid_acc = model.history.history["val_acc"]

plt.plot(range(len(train_loss)), train_loss, label="train loss")
plt.plot(range(len(valid_loss)), valid_loss, label="valid loss")
plt.legend()
plt.title("Loss")
plt.show()

plt.plot(range(len(train_acc)), train_acc, label="train accuracy")
plt.plot(range(len(valid_acc)), valid_acc, label="valid accuracy")
plt.legend()
plt.title("Accuracy")
plt.show()