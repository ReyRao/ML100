# -*- coding: utf-8 -*-
"""Day081_HW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iCMdLIJP5mavEPW7WMoE79__W_uls8Z9

## Work
1. 請比較使用 l1, l1_l2 及不同比例下的訓練結果
"""

import os
import keras

# Disable GPU
os.environ["CUDA_VISIBLE_DEVICES"] = ""

(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
print(f'x_train shape: {x_train.shape}\ny_train shape: {y_train.shape}')

## 資料前處理
def preproc_x(x, flatten=True):
    x = x / 255
    if flatten == True:
        x = x.reshape(len(x), -1)
    return x

def preproc_y(y, n_classes=10):
    if y.shape[-1] == 1:
        y = keras.utils.to_categorical(y, 10)
    return y

# Preproc the inputs
x_train = preproc_x(x_train)
x_test = preproc_x(x_test)

# Preprc the outputs
y_train = preproc_y(y_train)
y_test = preproc_y(y_test)
print(f'x_train shape: {x_train.shape}\ny_train shape: {y_train.shape}')

from keras.regularizers import l1, l2, l1_l2
class Mlp():
    def __init__(self, reg='l1'):
        self.reg = reg

    def build_mlp(self, input_data, output_data, n_neurons=[512, 256, 256, 256, 128] ,reg_ratio=1e-6):
        self.input_data = input_data
        self.output_data = output_data
        self.n_neurons = n_neurons
        self.reg_ratio = reg_ratio
        """
        Build your own model
        """
        kernel_regularizer = eval(f'{self.reg}({reg_ratio})')
        input_layer = keras.layers.Input([input_data.shape[-1]], name=str(self.reg)+'_input_layer')
        for i, n_unit in enumerate(n_neurons):
            if i == 0:
                x = keras.layers.Dense(units=n_unit, activation='relu', name=str(self.reg)+'_hidden_layer'+str(i+1), kernel_regularizer=kernel_regularizer)(input_layer)
            else:
                x = keras.layers.Dense(units=n_unit, activation='relu', name=str(self.reg)+'_hidden_layer'+str(i+1), kernel_regularizer=kernel_regularizer)(x)
        output_layer = keras.layers.Dense(units=output_data.shape[-1], activation='softmax', name=str(self.reg)+'_output_layer')(x)
        model = keras.models.Model(inputs=input_layer, outputs=output_layer)

        return model
reg_sets = ['l1', 'l2', 'l1_l2']
for reg in reg_sets:
    model = str(reg)+'_model'
    model = Mlp(reg)
    model = model.build_mlp(x_train, y_train)
    model.summary()

## 超參數設定
"""
Set your hyper-parameters
"""
LEARNING_RATE = 0.003
EPOCHS = 50
BATCH_SIZE = 1024

results = {}
"""
Set your training loop
"""
reg_sets = ['l1', 'l2', 'l1_l2']
for reg in reg_sets:
    keras.backend.clear_session()
    model = str(reg)+'_model'
    model = Mlp(reg)
    model = model.build_mlp(x_train, y_train)
    print(f'regularizer: {reg}')
    model.summary()
    
    optimizer = keras.optimizers.adagrad(lr=LEARNING_RATE)
    model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(x_train, y_train,
                batch_size=BATCH_SIZE,
                epochs=EPOCHS,
                validation_data=(x_test, y_test),
                shuffle=True)
    
    #collect data
    exp_tag = f'exp_{reg}'
    train_loss = model.history.history["loss"]
    valid_loss = model.history.history["val_loss"]
    train_acc = model.history.history["acc"]
    valid_acc = model.history.history["val_acc"]
    
    results[exp_tag] = {'train-loss': train_loss,
                        'valid-loss': valid_loss,
                        'train-acc': train_acc,
                        'valid-acc': valid_acc}

import matplotlib.pyplot as plt
# %matplotlib inline
"""
plot the results
"""
color_bar = ["r", "g", "b", "y", "m", "k"]
plt.figure(figsize=(10, 8))
for i, condition in enumerate(results.keys()):
    plt.plot(range(len(results[condition]['train-loss'])),results[condition]['train-loss'], '-', label=condition, color=color_bar[i])
    plt.plot(range(len(results[condition]['valid-loss'])),results[condition]['valid-loss'], '--', label=condition, color=color_bar[i])
plt.title("Loss")
plt.ylim([0, 5])
plt.legend()
plt.show()

plt.figure(figsize=(10, 8))
for i, condition in enumerate(results.keys()):
    plt.plot(range(len(results[condition]['train-acc'])),results[condition]['train-acc'], '-', label=condition, color=color_bar[i])
    plt.plot(range(len(results[condition]['valid-acc'])),results[condition]['valid-acc'], '--', label=condition, color=color_bar[i])
plt.title("Accuracy")
plt.legend()
plt.show()

import pandas as pd
results_df = pd.DataFrame(results)
results_df.head()